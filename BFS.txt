#include <stdio.h>
#define MAX 10
int visited[MAX];
int queue[MAX];
int front = -1, rear = -1;
int adj[MAX][MAX];
int n; // number of vertices
void enqueue(int v) {
    if (rear == MAX - 1) return; // Queue full
    if (front == -1) front = 0;
    queue[++rear] = v;
}
int dequeue() {
    if (front == -1) return -1; // Queue empty
    int v = queue[front++];
    if (front > rear) front = rear = -1;
    return v;
}
void BFS(int start) {
    enqueue(start);
    visited[start] = 1;
    while (front != -1) {
        int v = dequeue();
        printf("%d ", v);
        for (int i = 0; i < n; i++) {
            if (adj[v][i] == 1 && !visited[i]) {
                enqueue(i);
                visited[i] = 1;
            }
        }
    }
}

int main() {
    int edges, v1, v2, start;
    printf("Enter number of vertices: ");
    scanf("%d", &n);
  
    for (int i = 0; i < n; i++) {
        visited[i] = 0;
        for (int j = 0; j < n; j++) {
            adj[i][j] = 0;
        }
    }
    printf("Enter number of edges: ");
    scanf("%d", &edges);
    printf("Enter edges (u v):\n");
    for (int i = 0; i < edges; i++) {
        scanf("%d %d", &v1, &v2);
        adj[v1][v2] = 1;
        adj[v2][v1] = 1; 
    }
    printf("Enter starting vertex: ");
    scanf("%d", &start);
    printf("BFS Traversal: ");
    BFS(start);
    printf("\n");
    return 0;
}
